plugins {
    id 'org.jetbrains.intellij' version '0.4.15'
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
}

def pluginVersionSuffix = ideaVersionPrefix != '' ? '-' + ideaVersionPrefix : ''

group 'eu.long1.flutter'
version (pluginVersion + pluginVersionSuffix)

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.3'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.3.10'
    implementation 'org.yaml:snakeyaml:1.21'
}

// Read local.properties file.
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

patchPluginXml {
    version (pluginVersion + pluginVersionSuffix)
}

// Publishing credentials to JetBrains.
publishPlugin {
    // Preferred way to push plugins to JetBrains.
    token = localProperties.getProperty('token')

    // If you really must...
    username = localProperties.getProperty('username')
    password = localProperties.getProperty('password')
}

// IntelliJ base plugin configuration. The rest of the configuration is dynamic.
intellij {
    pluginName 'Flutter i18n'

    def requiredPlugins = ['yaml']

    // Starting with 2019.2, JetBrains extracted the Java functionality into its own plugin
    // so we have to check which plugins to load as build will fail when compiling for older IDE.
    // See: https://blog.jetbrains.com/platform/2019/06/java-functionality-extracted-as-a-plugin/
    if (ideaVersionPrefix != '' && ideaVersionPrefix.toInteger() >= 192) {
        requiredPlugins.add('java')
    }

    plugins = requiredPlugins
}

// Load product matrix.
def productMatrixFile = 'product-matrix.json'
def jsonFile = new File(productMatrixFile)
if (jsonFile == null) {
    // noinspection GroovyAssignabilityCheck
    throw new GradleException("Unable to read $productMatrixFile, is it missing?")
}

// Fail if the product details file isn't found.
// noinspection UnnecessaryQualifiedReference
def productMatrix = new groovy.json.JsonSlurper().parseText(jsonFile.text)
if (productMatrix == null || !(productMatrix instanceof Map)) {
    // noinspection GroovyAssignabilityCheck
    throw new GradleException("Unable to read $productMatrixFile.")
}

// If an ideaVersionPrefix is provided, search for the first matched product and use that.
if (ideaVersionPrefix != '') {
    def productMatrixKeys = productMatrix.keySet() as String[]
    for (productMatrixKey in productMatrixKeys) {
        if (productMatrixKey != null && productMatrixKey.startsWith("${ideaVersionPrefix}.")) {
            ideaVersion = productMatrixKey
            break
        }
    }
}

// Fail if requested version is unsupported.
if (!productMatrix.containsKey(ideaVersion)) {
    // noinspection GroovyAssignabilityCheck
    throw new GradleException("Requested IDEA version is unsupported: $ideaVersion")
}

// Determine which branch we're building for.
def productDetails = productMatrix[ideaVersion]
if (productDetails == null || !(productDetails instanceof Map)) {
    // noinspection GroovyAssignabilityCheck
    throw new GradleException("Product details for IDEA version $ideaVersion is missing or invalid.")
}

// Adjust plugin's output file name.
rootProject.setBuildDir("${rootProject.buildDir}/${productDetails.comments}")

System.out.println(
    "\nBuilding plugin ${(pluginVersion + pluginVersionSuffix)} for IDEA " +
    "version $ideaVersion (branch ${productDetails.comments})\n"
)
System.out.println("Since: ${productDetails.sinceBuild}")
System.out.println("Until: ${productDetails.untilBuild}")
System.out.println("Dart: ${productDetails.dartPluginVersion}")
System.out.println("Flutter: ${productDetails.flutterPluginVersion}\n")
System.out.println("Artifacts output directory: ${rootProject.buildDir}\n")

// Adjust plugin build settings.
intellij.version = ideaVersion
intellij.plugins += "Dart:${productDetails.dartPluginVersion}"
intellij.plugins += "io.flutter:${productDetails.flutterPluginVersion}"
patchPluginXml.sinceBuild = productDetails.sinceBuild
patchPluginXml.untilBuild = productDetails.untilBuild
